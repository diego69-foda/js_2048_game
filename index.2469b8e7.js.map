{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// Classe Game implementada diretamente no arquivo\nvar Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        _class_call_check(this, Game);\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n        this.size = 4;\n    }\n    _create_class(Game, [\n        {\n            key: \"generateRandomTile\",\n            value: function generateRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < this.size; i++){\n                    for(var j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push({\n                        row: i,\n                        col: j\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                    var value = Math.random() < 0.9 ? 2 : 4;\n                    this.board[randomCell.row][randomCell.col] = value;\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== \"playing\") return false;\n                var originalBoard = JSON.stringify(this.board);\n                for(var i = 0; i < this.size; i++)this.board[i] = this.mergeLine(this.board[i]);\n                var changed = JSON.stringify(this.board) !== originalBoard;\n                if (changed) {\n                    this.generateRandomTile();\n                    this.checkGameStatus();\n                }\n                return changed;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status !== \"playing\") return false;\n                var originalBoard = JSON.stringify(this.board);\n                for(var i = 0; i < this.size; i++){\n                    var reversed = this.board[i].reverse();\n                    var merged = this.mergeLine(reversed);\n                    this.board[i] = merged.reverse();\n                }\n                var changed = JSON.stringify(this.board) !== originalBoard;\n                if (changed) {\n                    this.generateRandomTile();\n                    this.checkGameStatus();\n                }\n                return changed;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status !== \"playing\") return false;\n                var originalBoard = JSON.stringify(this.board);\n                for(var j = 0; j < this.size; j++){\n                    var column = [];\n                    for(var i = 0; i < this.size; i++)column.push(this.board[i][j]);\n                    var merged = this.mergeLine(column);\n                    for(var i1 = 0; i1 < this.size; i1++)this.board[i1][j] = merged[i1];\n                }\n                var changed = JSON.stringify(this.board) !== originalBoard;\n                if (changed) {\n                    this.generateRandomTile();\n                    this.checkGameStatus();\n                }\n                return changed;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status !== \"playing\") return false;\n                var originalBoard = JSON.stringify(this.board);\n                for(var j = 0; j < this.size; j++){\n                    var column = [];\n                    for(var i = 0; i < this.size; i++)column.push(this.board[i][j]);\n                    var reversed = column.reverse();\n                    var merged = this.mergeLine(reversed);\n                    var finalColumn = merged.reverse();\n                    for(var i1 = 0; i1 < this.size; i1++)this.board[i1][j] = finalColumn[i1];\n                }\n                var changed = JSON.stringify(this.board) !== originalBoard;\n                if (changed) {\n                    this.generateRandomTile();\n                    this.checkGameStatus();\n                }\n                return changed;\n            }\n        },\n        {\n            key: \"mergeLine\",\n            value: function mergeLine(line) {\n                // Remove zeros\n                var filtered = line.filter(function(cell) {\n                    return cell !== 0;\n                });\n                // Mescla números iguais adjacentes\n                for(var i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n                    filtered[i] *= 2;\n                    this.score += filtered[i];\n                    filtered.splice(i + 1, 1);\n                }\n                // Adiciona zeros no final\n                while(filtered.length < this.size)filtered.push(0);\n                return filtered;\n            }\n        },\n        {\n            key: \"hasValidMoves\",\n            value: function hasValidMoves() {\n                // Verifica se há células vazias\n                for(var i = 0; i < this.size; i++)for(var j = 0; j < this.size; j++){\n                    if (this.board[i][j] === 0) return true;\n                }\n                // Verifica se há possibilidade de mesclar\n                for(var i1 = 0; i1 < this.size; i1++)for(var j1 = 0; j1 < this.size; j1++){\n                    var current = this.board[i1][j1];\n                    // Verifica direita\n                    if (j1 < this.size - 1 && this.board[i1][j1 + 1] === current) return true;\n                    // Verifica baixo\n                    if (i1 < this.size - 1 && this.board[i1 + 1][j1] === current) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"hasWon\",\n            value: function hasWon() {\n                for(var i = 0; i < this.size; i++)for(var j = 0; j < this.size; j++){\n                    if (this.board[i][j] === 2048) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                if (this.hasWon()) this.status = \"win\";\n                else if (!this.hasValidMoves()) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board.map(function(row) {\n                    return _to_consumable_array(row);\n                });\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.score = 0;\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                // Gera duas peças iniciais\n                this.generateRandomTile();\n                this.generateRandomTile();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.start();\n            }\n        }\n    ]);\n    return Game;\n}();\n// Cria uma instância do jogo\nvar game = new Game();\n// Elementos da interface\nvar gameField = document.querySelector(\".game-field\");\nvar gameScore = document.querySelector(\".game-score\");\nvar startButton = document.getElementById(\"main-button\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar restartLoseButton = document.getElementById(\"restart-lose\");\nvar restartWinButton = document.getElementById(\"restart-win\");\n// Função para atualizar a interface do jogo\nfunction updateGameInterface() {\n    var state = game.getState();\n    var score = game.getScore();\n    var gameStatus = game.getStatus();\n    // Atualiza o score\n    gameScore.textContent = score;\n    // Atualiza o tabuleiro\n    var cells = gameField.querySelectorAll(\".field-cell\");\n    cells.forEach(function(cell, index) {\n        var row = Math.floor(index / 4);\n        var col = index % 4;\n        var value = state[row][col];\n        // Remove todas as classes de valor\n        cell.className = \"field-cell\";\n        if (value !== 0) {\n            cell.textContent = value;\n            cell.classList.add(\"field-cell--\".concat(value));\n        } else cell.textContent = \"\";\n    });\n    // Atualiza as mensagens baseado no status\n    messageStart.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    switch(gameStatus){\n        case \"idle\":\n            messageStart.classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            messageWin.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            messageLose.classList.remove(\"hidden\");\n            break;\n    }\n    // Atualiza o botão\n    if (gameStatus === \"playing\") {\n        startButton.textContent = \"Restart\";\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n    } else {\n        startButton.textContent = \"Start\";\n        startButton.classList.remove(\"restart\");\n        startButton.classList.add(\"start\");\n    }\n}\n// Função para lidar com movimentos do teclado\nfunction handleKeydown(evt) {\n    if (game.getStatus() !== \"playing\") return;\n    var moved = false;\n    switch(evt.key){\n        case \"ArrowLeft\":\n            moved = game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = game.moveRight();\n            break;\n        case \"ArrowUp\":\n            moved = game.moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = game.moveDown();\n            break;\n        default:\n            return;\n    }\n    if (moved) updateGameInterface();\n}\n// Função para lidar com cliques no botão\nfunction handleButtonClick() {\n    var gameStatus = game.getStatus();\n    if (gameStatus === \"idle\" || gameStatus === \"win\" || gameStatus === \"lose\") game.start();\n    else game.restart();\n    updateGameInterface();\n}\n// Função para lidar com toques em dispositivos móveis\nvar touchStartX = 0;\nvar touchStartY = 0;\nfunction handleTouchStart(evt) {\n    touchStartX = evt.touches[0].clientX;\n    touchStartY = evt.touches[0].clientY;\n}\nfunction handleTouchEnd(evt) {\n    if (game.getStatus() !== \"playing\") return;\n    var touchEndX = evt.changedTouches[0].clientX;\n    var touchEndY = evt.changedTouches[0].clientY;\n    var deltaX = touchEndX - touchStartX;\n    var deltaY = touchEndY - touchStartY;\n    var minSwipeDistance = 30;\n    var moved = false;\n    if (Math.abs(deltaX) > Math.abs(deltaY)) // Movimento horizontal\n    {\n        if (Math.abs(deltaX) > minSwipeDistance) {\n            if (deltaX > 0) moved = game.moveRight();\n            else moved = game.moveLeft();\n        }\n    } else // Movimento vertical\n    if (Math.abs(deltaY) > minSwipeDistance) {\n        if (deltaY > 0) moved = game.moveDown();\n        else moved = game.moveUp();\n    }\n    if (moved) updateGameInterface();\n}\n// Adiciona event listeners\ndocument.addEventListener(\"keydown\", handleKeydown);\nstartButton.addEventListener(\"click\", handleButtonClick);\n// Adiciona event listeners para os botões de restart\nrestartLoseButton.addEventListener(\"click\", handleButtonClick);\nrestartWinButton.addEventListener(\"click\", handleButtonClick);\n// Suporte para dispositivos móveis\ngameField.addEventListener(\"touchstart\", handleTouchStart, {\n    passive: true\n});\ngameField.addEventListener(\"touchend\", handleTouchEnd, {\n    passive: true\n});\n// Inicializa a interface\nupdateGameInterface();\n// Previne o comportamento padrão de scroll em dispositivos móveis\ngameField.addEventListener(\"touchmove\", function(evt) {\n    evt.preventDefault();\n}, {\n    passive: false\n});\n\n//# sourceMappingURL=index.2469b8e7.js.map\n","'use strict';\n\n// Classe Game implementada diretamente no arquivo\nclass Game {\n  constructor(initialState) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n    this.size = 4;\n  }\n\n  generateRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      const value = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[randomCell.row][randomCell.col] = value;\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const originalBoard = JSON.stringify(this.board);\n\n    for (let i = 0; i < this.size; i++) {\n      this.board[i] = this.mergeLine(this.board[i]);\n    }\n\n    const changed = JSON.stringify(this.board) !== originalBoard;\n\n    if (changed) {\n      this.generateRandomTile();\n      this.checkGameStatus();\n    }\n\n    return changed;\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const originalBoard = JSON.stringify(this.board);\n\n    for (let i = 0; i < this.size; i++) {\n      const reversed = this.board[i].reverse();\n      const merged = this.mergeLine(reversed);\n\n      this.board[i] = merged.reverse();\n    }\n\n    const changed = JSON.stringify(this.board) !== originalBoard;\n\n    if (changed) {\n      this.generateRandomTile();\n      this.checkGameStatus();\n    }\n\n    return changed;\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const originalBoard = JSON.stringify(this.board);\n\n    for (let j = 0; j < this.size; j++) {\n      const column = [];\n\n      for (let i = 0; i < this.size; i++) {\n        column.push(this.board[i][j]);\n      }\n\n      const merged = this.mergeLine(column);\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = merged[i];\n      }\n    }\n\n    const changed = JSON.stringify(this.board) !== originalBoard;\n\n    if (changed) {\n      this.generateRandomTile();\n      this.checkGameStatus();\n    }\n\n    return changed;\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const originalBoard = JSON.stringify(this.board);\n\n    for (let j = 0; j < this.size; j++) {\n      const column = [];\n\n      for (let i = 0; i < this.size; i++) {\n        column.push(this.board[i][j]);\n      }\n\n      const reversed = column.reverse();\n      const merged = this.mergeLine(reversed);\n      const finalColumn = merged.reverse();\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = finalColumn[i];\n      }\n    }\n\n    const changed = JSON.stringify(this.board) !== originalBoard;\n\n    if (changed) {\n      this.generateRandomTile();\n      this.checkGameStatus();\n    }\n\n    return changed;\n  }\n\n  mergeLine(line) {\n    // Remove zeros\n    const filtered = line.filter((cell) => cell !== 0);\n\n    // Mescla números iguais adjacentes\n    for (let i = 0; i < filtered.length - 1; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        filtered[i] *= 2;\n        this.score += filtered[i];\n        filtered.splice(i + 1, 1);\n      }\n    }\n\n    // Adiciona zeros no final\n    while (filtered.length < this.size) {\n      filtered.push(0);\n    }\n\n    return filtered;\n  }\n\n  hasValidMoves() {\n    // Verifica se há células vazias\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          return true;\n        }\n      }\n    }\n\n    // Verifica se há possibilidade de mesclar\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const current = this.board[i][j];\n\n        // Verifica direita\n        if (j < this.size - 1 && this.board[i][j + 1] === current) {\n          return true;\n        }\n\n        // Verifica baixo\n        if (i < this.size - 1 && this.board[i + 1][j] === current) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasWon() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameStatus() {\n    if (this.hasWon()) {\n      this.status = 'win';\n    } else if (!this.hasValidMoves()) {\n      this.status = 'lose';\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.score = 0;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    // Gera duas peças iniciais\n    this.generateRandomTile();\n    this.generateRandomTile();\n  }\n\n  restart() {\n    this.start();\n  }\n}\n\n// Cria uma instância do jogo\nconst game = new Game();\n\n// Elementos da interface\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst startButton = document.getElementById('main-button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst restartLoseButton = document.getElementById('restart-lose');\nconst restartWinButton = document.getElementById('restart-win');\n\n// Função para atualizar a interface do jogo\nfunction updateGameInterface() {\n  const state = game.getState();\n  const score = game.getScore();\n  const gameStatus = game.getStatus();\n\n  // Atualiza o score\n  gameScore.textContent = score;\n\n  // Atualiza o tabuleiro\n  const cells = gameField.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = state[row][col];\n\n    // Remove todas as classes de valor\n    cell.className = 'field-cell';\n\n    if (value !== 0) {\n      cell.textContent = value;\n      cell.classList.add(`field-cell--${value}`);\n    } else {\n      cell.textContent = '';\n    }\n  });\n\n  // Atualiza as mensagens baseado no status\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  switch (gameStatus) {\n    case 'idle':\n      messageStart.classList.remove('hidden');\n      break;\n    case 'win':\n      messageWin.classList.remove('hidden');\n      break;\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      break;\n  }\n\n  // Atualiza o botão\n  if (gameStatus === 'playing') {\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n  } else {\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n  }\n}\n\n// Função para lidar com movimentos do teclado\nfunction handleKeydown(evt) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  let moved = false;\n\n  switch (evt.key) {\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  if (moved) {\n    updateGameInterface();\n  }\n}\n\n// Função para lidar com cliques no botão\nfunction handleButtonClick() {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'idle' || gameStatus === 'win' || gameStatus === 'lose') {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  updateGameInterface();\n}\n\n// Função para lidar com toques em dispositivos móveis\nlet touchStartX = 0;\nlet touchStartY = 0;\n\nfunction handleTouchStart(evt) {\n  touchStartX = evt.touches[0].clientX;\n  touchStartY = evt.touches[0].clientY;\n}\n\nfunction handleTouchEnd(evt) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const touchEndX = evt.changedTouches[0].clientX;\n  const touchEndY = evt.changedTouches[0].clientY;\n\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  const minSwipeDistance = 30;\n  let moved = false;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    // Movimento horizontal\n    if (Math.abs(deltaX) > minSwipeDistance) {\n      if (deltaX > 0) {\n        moved = game.moveRight();\n      } else {\n        moved = game.moveLeft();\n      }\n    }\n  } else {\n    // Movimento vertical\n    if (Math.abs(deltaY) > minSwipeDistance) {\n      if (deltaY > 0) {\n        moved = game.moveDown();\n      } else {\n        moved = game.moveUp();\n      }\n    }\n  }\n\n  if (moved) {\n    updateGameInterface();\n  }\n}\n\n// Adiciona event listeners\ndocument.addEventListener('keydown', handleKeydown);\nstartButton.addEventListener('click', handleButtonClick);\n\n// Adiciona event listeners para os botões de restart\nrestartLoseButton.addEventListener('click', handleButtonClick);\nrestartWinButton.addEventListener('click', handleButtonClick);\n\n// Suporte para dispositivos móveis\ngameField.addEventListener('touchstart', handleTouchStart, { passive: true });\ngameField.addEventListener('touchend', handleTouchEnd, { passive: true });\n\n// Inicializa a interface\nupdateGameInterface();\n\n// Previne o comportamento padrão de scroll em dispositivos móveis\ngameField.addEventListener(\n  'touchmove',\n  (evt) => {\n    evt.preventDefault();\n  },\n  { passive: false },\n);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","game","protoProps","Game","initialState","_class_call_check","instance","Constructor","TypeError","board","score","status","size","key","value","emptyCells","j","push","row","col","randomCell","Math","floor","random","originalBoard","JSON","stringify","mergeLine","changed","generateRandomTile","checkGameStatus","reversed","reverse","merged","column","i1","finalColumn","line","filtered","filter","cell","splice","j1","current","hasWon","hasValidMoves","map","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","start","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","gameField","document","querySelector","gameScore","startButton","getElementById","messageStart","messageWin","messageLose","restartLoseButton","restartWinButton","updateGameInterface","state","getState","getScore","gameStatus","getStatus","textContent","cells","querySelectorAll","forEach","index","className","classList","add","concat","remove","handleButtonClick","restart","touchStartX","touchStartY","addEventListener","evt","moved","moveLeft","moveRight","moveUp","moveDown","touches","clientX","clientY","passive","touchEndX","changedTouches","touchEndY","deltaX","deltaY","abs","preventDefault"],"version":3,"file":"index.2469b8e7.js.map"}